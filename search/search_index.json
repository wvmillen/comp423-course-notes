{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to William's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: William Millen - Github</li> <li>Reviewer: Abid Hussain - Github</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>If you have a prerequisite satisfied/installed, you don't need to install it again</p> <ol> <li> <p>Git Installed: Install Git Here if you haven't already</p> </li> <li> <p>VS Code(Visual Studio Code) Installed: Install VS Code Here</p> </li> <li> <p>Docker Installed: Install Docker Here</p> </li> <li> <p>Command Line Basics: Read here for more information on the basics</p> </li> <li> <p>Dev Containers Extension for VS Code: More Info Here</p> </li> </ol>"},{"location":"tutorials/rust-setup/#creating-a-new-dev-container-in-rust","title":"Creating a new Dev Container in Rust","text":""},{"location":"tutorials/rust-setup/#starting-off","title":"Starting off","text":""},{"location":"tutorials/rust-setup/#git","title":"Git","text":"<ol> <li>Open your terminal or command prompt</li> <li>Create a new directory for your project, the default will be in your user's home directory <pre><code>    mkdir rust-intro\n    cd rust-intro   \n</code></pre></li> <li> <p>Intialize a new git repository <pre><code>git init \n</code></pre></p> </li> <li> <p>Create a README file: <pre><code>    echo '# Rust &gt; C' &gt; README.md\n    git add README.md\n    git commit -m \"Inital commit with README.md\"\n</code></pre></p> </li> </ol>"},{"location":"tutorials/rust-setup/#create-a-github-repository","title":"Create a Github repository","text":"<ol> <li>Log into your github account and create a new repository with the name as rust-intro.</li> <li>Do not Intialize the README.md, we will create this later</li> <li>Click <code>Create Repository</code></li> </ol>"},{"location":"tutorials/rust-setup/#link-your-repository-to-github","title":"Link your repository to Github","text":"<ol> <li>Add repository as a remote, replacing <code>&lt;your-username&gt;</code> as your Github username. <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-intro.git\n</code></pre></li> <li> <p>Check your default branch is <code>main</code> with <code>git branch</code>. If it is not, make it <code>main</code> with the command <code>git branch -M main</code></p> </li> <li> <p>Push your local commits to github with <pre><code>git push --set-upstream origin main\n</code></pre></p> </li> </ol>"},{"location":"tutorials/rust-setup/#dev-containers","title":"Dev containers","text":"<p>Why a Dev Container? A Dev Container ensures your development environment is consistent and works with whatever machine may be running it. It makes collabration easy and saves a lot of time. It's best practice and in short it solves the issue of \"but it works on my machine\".</p> <p>Dependicies: We will be using cargo, a package manager for rust similar to pip for python or npm for javascript. The devcontainer.json is where we will specify our files for a consistent development environment using a Docker image, a tool to run our dev container. Our devcontainer.json will automate the process of setting up a developer environment.</p>"},{"location":"tutorials/rust-setup/#setting-up-a-dev-container","title":"Setting up a Dev Container","text":""},{"location":"tutorials/rust-setup/#step-1-lets-do-some-container-configuration","title":"Step 1: Let's do some container configuration!","text":"<ol> <li>In VS Code, open the rust-intro directory. This can via: File &gt; Open Folder</li> <li>Install Dev Containers extension in VS Code</li> <li>create a <code>.devcontainer</code> directory in the root of your project which is the <code>rust-intro</code> directory we just made <pre><code>mkdir .devcontainer\n</code></pre></li> <li>Use VS Code and create a file named <code>devcontainer.json</code> inside of the <code>.devcontainer</code> directory</li> </ol> <p>Now we are going to specify some configurations for our development environment <pre><code>{\n    \"name\": \"Rust Intro\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\":{\n            \"settings\": {},\n            \"extensions\":[\"rust-lang.rust-analyzer\"]\n        }\n    },    \n    \"postCreateCommand\": \"\",\n}\n</code></pre> Here's what everything does</p> <ul> <li> <p><code>name:</code> This is what your dev container will be named</p> </li> <li> <p><code>image:</code> The docker image to use, in this case we will be using a preconfigured image for rust by microsoft</p> </li> <li> <p><code>customizations:</code> Adds configurations like VS Code extensions ensuring other developers have them too. <code>rust-lang.rust-analyzer</code> is the standard language server for rust development in vs code.</p> </li> <li> <p><code>postCreateCommand:</code> A command to run after the container is created. In our case, we don't include anything because <code>cargo</code> will take care of this for us!</p> </li> </ul>"},{"location":"tutorials/rust-setup/#step-2-reopen-project-in-a-vscode-dev-container","title":"Step 2: Reopen project in a VSCode Dev Container","text":"<p>Reopening the project in a dev container can be done with <code>Ctrl+Shift+P</code>(or <code>Cmd+Shift+P</code> on Mac) and typing \"Dev Containers: Reopen in Container\" and selecting that option. </p> <p>Pop-Up</p> <p>You also may see a pop up in VSCode on the bottom right hand side of your screen roughly stating \"Would you like to reopen this project in a dev container?\" which you can click yes to to achieve the same result.</p>"},{"location":"tutorials/rust-setup/#creating-a-new-project","title":"Creating a new project","text":""},{"location":"tutorials/rust-setup/#setting-up-out-project","title":"Setting up out project","text":"<p>verify that rust is avalible with: <pre><code>rustc --version\n</code></pre> We will start a new package with the command: <pre><code>cargo new hello_world --bin --vcs none\n</code></pre></p> <p>What's <code>--bin</code> and <code>--vcs none</code>?</p> <p><code>--bin</code> tells cargo we are making a new binary program instead of a library which would be done by <code>--lib</code>. By deafult this also creates a new <code>git</code> repository which can be avoided by <code>--vcs none</code></p> <p>Now we will go into the new package that cargo has created for us! <pre><code>cd hello_world\n</code></pre> run the following in your terminal: <pre><code>tree .\n</code></pre> we should see something like this: <pre><code>.\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 main.rs\n\n1 directory, 2 files\n</code></pre> now open the <code>Cargo.toml</code> file and look at what we see <pre><code>[package]\nname = \"hello_world\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n</code></pre> This contains all of the data Cargo needs to compile your package. Now go inside of the src file <pre><code>cd src\n</code></pre> And now open the <code>main.rs</code> file and look what we see <pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre> This is a program generated by cargo, know as a binary crate</p> <p>Return to the parent directory with <pre><code>cd ..\n</code></pre></p>"},{"location":"tutorials/rust-setup/#running-our-project","title":"Running our project","text":"<p>Let's compile it. When we say <code>cargo build</code>, it is similar to using <code>gcc</code> in C. Both commands take your source files, compile them, and output an executable file. In the case of Rust, <code>cargo build</code> generates the executable in the <code>target/debug</code> directory by default, where <code>gcc</code> typically places the executable in the current directory unless otherwise specified. lternativly we can simply run <code>cargo run</code> and this will compile and execute our program in one step. Let's Try both methods! </p>"},{"location":"tutorials/rust-setup/#cargo-build","title":"<code>cargo build</code>","text":"<p>Lets run <code>cargo build</code> <pre><code>cargo build\n</code></pre> Now we can run the executable <pre><code>./target/debug/hello_world\n</code></pre> and we will see <code>Hello, world!</code> as our output.</p> <p>Optional Flag: <code>cargo build --release</code></p> <p>This flag puts the resulting binary file in <code>target/release</code> instead of <code>target/debug</code>. Debug will result in code that runs slower while release will result in code that runs faster. This is completly optional.</p>"},{"location":"tutorials/rust-setup/#cargo-run","title":"<code>cargo run</code>","text":"<p>With <code>cargo run</code> we can compile and run all in 1 step! Let's check it out. <pre><code>cargo run\n</code></pre> It will simply output <code>Hello, world!</code>. Notice we don't have to build and then run, it is all done in 1 step!</p>"},{"location":"tutorials/rust-setup/#the-end","title":"The End","text":"<p>Congrationlations! The output should be <code>Hello, world!</code>. You have just set up a devcontainer in Rust and ran your own program!</p> <p>Push your changes to github with: <pre><code>git add -A\ngit commit -m \"Rust Setup Complete\"\ngit push origin\n</code></pre></p>"}]}